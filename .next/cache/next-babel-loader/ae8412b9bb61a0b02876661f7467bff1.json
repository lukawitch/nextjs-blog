{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action } from \"mobx\";\nlet UIStore = (_class = (_temp = class UIStore {\n  constructor() {\n    _initializerDefineProperty(this, \"searchOverlayOpen\", _descriptor, this);\n  }\n\n  setSearchOverlayOpen(value) {\n    this.searchOverlayOpen = value;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"searchOverlayOpen\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setSearchOverlayOpen\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSearchOverlayOpen\"), _class.prototype)), _class);\nexport default UIStore;","map":{"version":3,"sources":["C:/Users/MSI/Desktop/sajubajufront/stores/UIStore.js"],"names":["observable","action","UIStore","setSearchOverlayOpen","value","searchOverlayOpen"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;IACMC,O,sBAAN,MAAMA,OAAN,CAAc;AAAA;AAAA;AAAA;;AAGJC,EAAAA,oBAAR,CAA6BC,KAA7B,EAAoC;AAClC,SAAKC,iBAAL,GAAyBD,KAAzB;AACD;;AALW,C,2FACXJ,U;;;;;WAA+B,K;;yEAE/BC,M;AAKH,eAAeC,OAAf","sourcesContent":["import { observable, action } from \"mobx\";\r\nclass UIStore {\r\n  @observable searchOverlayOpen = false;\r\n\r\n  @action setSearchOverlayOpen(value) {\r\n    this.searchOverlayOpen = value;\r\n  }\r\n}\r\n\r\nexport default UIStore;\r\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["../src/index.js"],"names":["__NEXT_MOBX_STORE__","Map","BaseStore","props","prop","action","data","getOrCreateStore","storeKeyName","Store","initialState","itemState","dataMap","toJS","e","isServer","has","set","get"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;;IAEaC,S,sBACX,qBAAwB;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AAAA;;AAAA;;AACtB,OAAK,IAAMC,IAAX,IAAmBD,KAAnB,EAA0B;AACxB;AACA,SAAKC,IAAL,IAAa,sBAAUD,KAAK,CAACC,IAAD,CAAf,CAAb;AACD;AACF,C,gFAEAC,Y;;;;;;;WACQ,YAAe;AAAA,UAAdC,IAAc,uEAAP,EAAO;;AACtB,WAAK,IAAMF,IAAX,IAAmBE,IAAnB,EAAyB;AACvB,QAAA,KAAI,CAACF,IAAD,CAAJ,GAAaE,IAAI,CAACF,IAAD,CAAjB;AACD;AACF,K;;;;;AAGI,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD,EAAeC,KAAf;AAAA,SAAyB,UAAAC,YAAY,EAAI;AACvE;AACA,QAAIA,YAAJ,EAAkB;AAChB,WAAK,IAAMC,SAAX,IAAwBD,YAAxB,EAAsC;AACpC,YAAI;AACF,cAAME,OAAO,GAAGF,YAAY,CAACC,SAAD,CAA5B;;AAEA,cAAIC,OAAO,CAACC,IAAR,cAA0BZ,GAA9B,EAAmC;AACjCS,YAAAA,YAAY,CAACC,SAAD,CAAZ,GAA0B,sBAAUC,OAAV,CAA1B;AACD;AACF,SAND,CAME,OAAOE,CAAP,EAAU,CAAE;AACf;AACF,KAZsE,CAcvE;;;AACA,QAAIC,eAAJ,EAAc;AACZ,aAAO,IAAIN,KAAJ,CAAUC,YAAV,CAAP;AACD,KAjBsE,CAmBvE;;;AACA,QAAI,CAACV,mBAAmB,CAACgB,GAApB,CAAwBR,YAAxB,CAAL,EAA4C;AAC1CR,MAAAA,mBAAmB,CAACiB,GAApB,CAAwBT,YAAxB,EAAsC,IAAIC,KAAJ,CAAUC,YAAV,CAAtC;AACD;;AAED,WAAOV,mBAAmB,CAACkB,GAApB,CAAwBV,YAAxB,CAAP;AACD,GAzB+B;AAAA,CAAzB","sourcesContent":["import {action} from 'mobx';\nimport {isServer, mapToJson, jsonToMap} from './utils';\nexport {default as withMobx} from './with-mobx';\n\nconst __NEXT_MOBX_STORE__ = new Map();\n\nexport class BaseStore {\n  constructor(props = {}) {\n    for (const prop in props) {\n      // Convert JSON to Map\n      this[prop] = jsonToMap(props[prop]);\n    }\n  }\n\n  @action\n  update = (data = {}) => {\n    for (const prop in data) {\n      this[prop] = data[prop];\n    }\n  };\n}\n\nexport const getOrCreateStore = (storeKeyName, Store) => initialState => {\n  // Convert Map to JSON\n  if (initialState) {\n    for (const itemState in initialState) {\n      try {\n        const dataMap = initialState[itemState];\n\n        if (dataMap.toJS() instanceof Map) {\n          initialState[itemState] = mapToJson(dataMap);\n        }\n      } catch (e) {}\n    }\n  }\n\n  // Always make a new store if server\n  if (isServer) {\n    return new Store(initialState);\n  }\n\n  // Create store if unavailable on the client\n  if (!__NEXT_MOBX_STORE__.has(storeKeyName)) {\n    __NEXT_MOBX_STORE__.set(storeKeyName, new Store(initialState));\n  }\n\n  return __NEXT_MOBX_STORE__.get(storeKeyName);\n};\n"],"file":"index.js"}